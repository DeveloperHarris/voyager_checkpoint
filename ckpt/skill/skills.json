{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const logBlock = bot.findBlock({\n    matching: block => logNames.includes(block.name),\n    maxDistance: 32\n  });\n  if (!logBlock) {\n    bot.chat(\"No wood log found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundLog = bot.findBlock({\n        matching: block => logNames.includes(block.name),\n        maxDistance: 32\n      });\n      return foundLog;\n    });\n  }\n  bot.chat(\"Wood log found. Mining...\");\n  await mineBlock(bot, logBlock.name, 1);\n  bot.chat(\"Wood log mined.\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log. It first searches for a nearby wood log within a certain range. If it cannot find one, it explores the environment until it finds a wood log. Once a wood log is found, it mines it and saves the event of mining the wood log.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (craftingTable) {\n    bot.chat(\"Crafting table already in inventory.\");\n    return;\n  }\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 4) {\n    // Mine oak logs and craft oak planks\n    bot.chat(\"Mining oak logs to craft oak planks...\");\n    await mineBlock(bot, \"oak_log\", 1);\n    bot.chat(\"Crafting oak planks...\");\n    await craftItem(bot, \"oak_planks\", 1);\n  }\n\n  // Craft a crafting table using oak planks\n  bot.chat(\"Crafting crafting table...\");\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafting table crafted.\");\n}", "description": "async function craftCraftingTable(bot) {\n    // The function is about crafting a crafting table using oak planks. First, check if there is already a crafting table in the inventory. If not, check if there are enough oak planks in the inventory. If there are not enough oak planks, mine oak logs and craft oak planks. Finally, craft a crafting table using oak planks.\n}"}, "obtainOakLogs": {"code": "async function obtainOakLogs(bot) {\n  const oakLogName = \"oak_log\";\n  const oakLogItem = bot.inventory.findInventoryItem(mcData.itemsByName[oakLogName].id);\n  if (oakLogItem && oakLogItem.count >= 3) {\n    bot.chat(\"Already have 3 oak logs in inventory.\");\n    return;\n  }\n  const logsNeeded = oakLogItem ? 3 - oakLogItem.count : 3;\n  bot.chat(`Mining ${logsNeeded} oak logs...`);\n  await mineBlock(bot, oakLogName, logsNeeded);\n  bot.chat(\"Obtained 3 oak logs.\");\n}", "description": "async function obtainOakLogs(bot) {\n    // The function is about obtaining 3 oak logs. It checks if there are already 3 oak logs in the inventory, and if so, it returns. If not, it calculates how many more logs are needed and mines them. Finally, it sends a message indicating that 3 oak logs have been obtained.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table using oak logs\n    await craftCraftingTable(bot);\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 3) {\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 2); // Craft 2 times to get 4 oak planks\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a wooden pickaxe using oak planks and sticks\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Wooden pickaxe crafted.\");\n}", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe using oak planks and sticks. It first checks if there is a crafting table in the inventory, and if not, crafts one. Then it places the crafting table near the player. Next, it checks if there are enough oak planks and sticks in the inventory, and if not, crafts them. Finally, it crafts a wooden pickaxe using the oak planks and sticks, and sends a chat message indicating that the pickaxe has been crafted.\n}"}, "craftWoodenAxe": {"code": "async function craftWoodenAxe(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table using oak planks\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 3) {\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 2); // Craft 2 times to get 4 oak planks\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a wooden axe using oak planks and sticks\n  await craftItem(bot, \"wooden_axe\", 1);\n  bot.chat(\"Wooden axe crafted.\");\n}", "description": "async function craftWoodenAxe(bot) {\n    // The function crafts a wooden axe using oak planks and sticks. It first checks if there is a crafting table in the inventory, and if not, crafts one. Then it places the crafting table near the player. Next, it checks if there are enough oak planks and sticks in the inventory, and if not, crafts them. Finally, it crafts a wooden axe using the oak planks and sticks, and sends a chat message indicating that the wooden axe has been crafted.\n}"}, "craftWoodenShovel": {"code": "async function craftWoodenShovel(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table using oak logs\n    await craftCraftingTable(bot);\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 2) {\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 1); // Craft 1 time to get 2 oak planks\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 1) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a wooden shovel using oak planks and sticks\n  await craftItem(bot, \"wooden_shovel\", 1);\n  bot.chat(\"Wooden shovel crafted.\");\n}", "description": "async function craftWoodenShovel(bot) {\n    // The function crafts a wooden shovel using oak planks and sticks. It first checks if there is a crafting table in the inventory, and if not, crafts one. Then it places the crafting table near the player. Next, it checks if there are enough oak planks and sticks in the inventory, and if not, crafts them. Finally, it crafts a wooden shovel using the oak planks and sticks, and sends a chat message indicating that the wooden shovel has been crafted.\n}"}, "checkWoodenShovel": {"code": "async function checkWoodenShovel(bot) {\n  const woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_shovel\"].id);\n  if (woodenShovel) {\n    bot.chat(\"Wooden shovel already in inventory. Task completed.\");\n  } else {\n    bot.chat(\"Wooden shovel not found in inventory.\");\n  }\n}", "description": "async function checkWoodenShovel(bot) {\n    // The function checks if a wooden shovel is in the inventory and sends a chat message indicating whether it is found or not.\n}"}, "mineTenCobblestone": {"code": "async function mineTenCobblestone(bot) {\n  // Equip the wooden pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  await bot.equip(woodenPickaxe, \"hand\");\n\n  // Mine 10 cobblestone\n  await mineBlock(bot, \"stone\", 10);\n  bot.chat(\"10 cobblestone mined.\");\n}", "description": "async function mineTenCobblestone(bot) {\n    // The function is about mining 10 cobblestones using a wooden pickaxe. It equips the wooden pickaxe in the hand and mines a total of 10 cobblestone blocks using the wooden pickaxe. Finally, it sends a chat message indicating that 10 cobblestone blocks have been mined.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  // Equip the wooden pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  await bot.equip(woodenPickaxe, \"hand\");\n\n  // Mine 5 coal ores\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a wooden pickaxe. The function equips the wooden pickaxe in the hand and mines 5 coal ores using the `mineBlock` helper function. Once the mining is complete, the function sends a chat message indicating that 5 coal ores have been mined.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if there is a crafting table nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName[\"crafting_table\"].id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    // Place the crafting table from the inventory near the player\n    const tablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Check if there are enough cobblestone in the inventory\n  const cobblestone = bot.inventory.findInventoryItem(mcData.itemsByName[\"cobblestone\"].id);\n  if (!cobblestone || cobblestone.count < 3) {\n    // Mine cobblestone using the wooden pickaxe\n    await mineBlock(bot, \"stone\", 3);\n  }\n\n  // Craft a stone pickaxe using cobblestone and sticks\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Stone pickaxe crafted.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using cobblestone and sticks. It checks if there is a crafting table nearby, and places one if there isn't. It then checks if there are enough sticks and cobblestone in the inventory, crafting them if necessary. Finally, it crafts a stone pickaxe and sends a chat message indicating success.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Mine 5 copper ores\n  await mineBlock(bot, \"copper_ore\", 5);\n  bot.chat(\"5 copper ores mined.\");\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function is about mining 5 copper ores using a stone pickaxe. The function equips the stone pickaxe in the hand and mines 5 copper ores. Once the mining is complete, the function sends a chat message indicating that 5 copper ores have been mined.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestone = bot.inventory.findInventoryItem(mcData.itemsByName[\"cobblestone\"].id);\n  if (!cobblestone || cobblestone.count < 8) {\n    // Mine more cobblestones using the stone pickaxe\n    await mineBlock(bot, \"stone\", 8 - (cobblestone ? cobblestone.count : 0));\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Craft a furnace using the cobblestones\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Furnace crafted.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function crafts a furnace using cobblestones. It checks if there are enough cobblestones in the inventory, and if not, it mines more using a stone pickaxe. Then, it places a crafting table near the player and crafts a furnace using the cobblestones. Finally, it sends a chat message indicating that the furnace has been crafted.\n}"}, "smeltFiveRawCopper": {"code": "async function smeltFiveRawCopper(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    // Craft a furnace using cobblestone\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 5);\n  bot.chat(\"5 raw copper smelted.\");\n}", "description": "async function smeltFiveRawCopper(bot) {\n    // The function is about smelting 5 raw copper using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory, and if not, it crafts one. Then, it places the furnace near the player. Finally, it smelts 5 raw copper using coal as fuel and sends a chat message when finished.\n}"}, "obtainTenWoodLogs": {"code": "async function obtainTenWoodLogs(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  let totalLogs = 0;\n\n  // Check if there are already 10 wood logs in the inventory\n  for (const logName of logNames) {\n    const logItem = bot.inventory.findInventoryItem(mcData.itemsByName[logName].id);\n    if (logItem) {\n      totalLogs += logItem.count;\n    }\n  }\n  if (totalLogs >= 10) {\n    bot.chat(\"Already have 10 wood logs in inventory.\");\n    return;\n  }\n  const logsNeeded = 10 - totalLogs;\n  bot.chat(`Mining ${logsNeeded} wood logs...`);\n\n  // Equip the wooden axe if available in the inventory\n  const woodenAxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_axe\"].id);\n  if (woodenAxe) {\n    await bot.equip(woodenAxe, \"hand\");\n  }\n  for (let i = 0; i < logsNeeded; i++) {\n    // Use exploreUntil to find a wood log if not found nearby\n    const logBlock = bot.findBlock({\n      matching: block => logNames.includes(block.name),\n      maxDistance: 32\n    });\n    if (!logBlock) {\n      await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const foundLog = bot.findBlock({\n          matching: block => logNames.includes(block.name),\n          maxDistance: 32\n        });\n        return foundLog;\n      });\n    }\n\n    // Mine the required number of wood logs using mineBlock\n    await mineBlock(bot, logBlock.name, 1);\n  }\n  bot.chat(\"Obtained 10 wood logs.\");\n}", "description": "async function obtainTenWoodLogs(bot) {\n    // The function is about obtaining 10 wood logs. It checks if there are already 10 wood logs in the inventory, and if so, returns. Otherwise, it calculates the number of logs needed and equips a wooden axe if available. It then uses `exploreUntil` to find a wood log if not found nearby, and mines the required number of wood logs using `mineBlock`. Finally, it reports the success of obtaining 10 wood logs.\n}"}, "killThreeChickens": {"code": "async function killThreeChickens(bot) {\n  for (let i = 0; i < 3; i++) {\n    // Explore until finding a chicken\n    const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return chicken;\n    });\n    if (chicken) {\n      // Kill the chicken\n      await killMob(bot, \"chicken\", 300);\n      bot.chat(`Killed chicken ${i + 1}/3.`);\n    } else {\n      bot.chat(\"Could not find enough chickens.\");\n      break;\n    }\n  }\n}", "description": "async function killThreeChickens(bot) {\n    // The function is about killing three chickens. It explores the environment until finding a chicken within 32 blocks. Once a chicken is found, it kills the chicken and logs the number of chickens killed. If it cannot find enough chickens, it stops searching.\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  // Check if there is a crafting table nearby\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName[\"crafting_table\"].id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    // Place the crafting table from the inventory near the player\n    const tablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Check if there are enough cobblestones in the inventory\n  const cobblestone = bot.inventory.findInventoryItem(mcData.itemsByName[\"cobblestone\"].id);\n  if (!cobblestone || cobblestone.count < 2) {\n    // Mine more cobblestones using the stone pickaxe\n    await mineBlock(bot, \"stone\", 2 - (cobblestone ? cobblestone.count : 0));\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 1) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a stone sword using cobblestones and sticks\n  await craftItem(bot, \"stone_sword\", 1);\n  bot.chat(\"Stone sword crafted.\");\n}", "description": "async function craftStoneSword(bot) {\n    // The function crafts a stone sword using cobblestones and sticks. It checks if there is a crafting table nearby, and places one if there isn't. It then checks if there are enough cobblestones and sticks in the inventory, and mines/crafts more if necessary. Finally, it crafts a stone sword and sends a chat message.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Explore until finding an iron ore block\n  const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const iron_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"iron_ore\"].id,\n      maxDistance: 32\n    });\n    return iron_ore;\n  });\n\n  // Mine 5 iron ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ore blocks using a stone pickaxe. The function equips the stone pickaxe and explores the environment until finding an iron ore block. Once an iron ore block is found, the function mines a total of 5 iron ore blocks using the stone pickaxe and sends a chat message indicating the successful mining.\n}"}, "smeltFiveRawIron": {"code": "async function smeltFiveRawIron(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    // Craft a furnace using cobblestone\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}", "description": "async function smeltFiveRawIron(bot) {\n    // The function is about smelting 5 raw iron using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory, and if not, it crafts one. Then, it places the furnace near the player. Finally, it smelts 5 raw iron using coal as fuel and sends a chat message when finished.\n}"}, "craftIronPickaxeWithSmelting": {"code": "async function craftIronPickaxeWithSmelting(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 3) {\n    // Mine one more iron ore\n    await mineBlock(bot, \"iron_ore\", 1);\n  }\n\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      // Craft a furnace using cobblestone\n      await mineBlock(bot, \"stone\", 8);\n      await craftItem(bot, \"furnace\", 1);\n      furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n    }\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Smelt the iron ore using the furnace and coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n\n  // Check if there are enough sticks in the inventory\n  let sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft an extra stick using wooden planks\n    await craftItem(bot, \"stick\", 1);\n    sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  }\n\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron pickaxe using the crafting table, 3 iron ingots, and 2 sticks\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxeWithSmelting(bot) {\n    // The function is about crafting an iron pickaxe using smelting and crafting table. It checks if there are enough iron ingots in the inventory, and if not, it mines one more iron ore. It also checks if there is a furnace and a crafting table in the inventory or nearby, and if not, it crafts them. Then it places the furnace and crafting table near the player if they are not already placed. After that, it smelts the iron ore using the furnace and coal as fuel, and crafts an iron pickaxe using the crafting table, 3 iron ingots, and 2 sticks. Finally, it sends a chat message indicating that the iron pickaxe has been crafted.\n}"}, "mineOneDiamondOre": {"code": "async function mineOneDiamondOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore the underground area around level 12\n  const diamondOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const diamond_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 10,\n      maxY: 14\n    });\n    return diamond_ore;\n  });\n\n  // Mine the diamond ore when found\n  if (diamondOre) {\n    await mineBlock(bot, \"diamond_ore\", 1);\n    bot.chat(\"1 diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find diamond ore.\");\n  }\n}", "description": "async function mineOneDiamondOre(bot) {\n    // The function is about mining a single diamond ore block using an iron pickaxe. The function equips the iron pickaxe and explores the underground area around level 12 until it finds a diamond ore block. Once found, the function mines the diamond ore block and outputs a message indicating that one diamond ore block has been mined. If the diamond ore block is not found, the function outputs a message indicating that it could not find diamond ore.\n}"}, "mineThreeDiamondOres": {"code": "async function mineThreeDiamondOres(bot) {\n  // Check if the bot has an iron pickaxe or a diamond pickaxe in its inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the iron pickaxe or diamond pickaxe\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have an iron or diamond pickaxe to mine diamond ores.\");\n    return;\n  }\n\n  // Explore the underground area around level 12\n  const diamondOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const diamond_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 10,\n      maxY: 14,\n      count: 3\n    });\n    return diamond_ores.length >= 3 ? diamond_ores : null;\n  });\n\n  // Mine the diamond ores when found\n  if (diamondOres) {\n    await mineBlock(bot, \"diamond_ore\", 3);\n    bot.chat(\"3 diamond ores mined.\");\n  } else {\n    bot.chat(\"Could not find 3 diamond ores.\");\n  }\n}", "description": "async function mineThreeDiamondOres(bot) {\n    // The function is about mining 3 diamond ores using either an iron pickaxe or a diamond pickaxe. First, check if the bot has either an iron pickaxe or a diamond pickaxe in its inventory. If the bot has either pickaxe, equip it in the hand. Next, explore the underground area around level 12 until finding 3 diamond ores. Once 3 diamond ores are found, mine them using the equipped pickaxe.\n}"}, "craftDiamondPickaxe": {"code": "async function craftDiamondPickaxe(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft a diamond pickaxe using the crafting table, 3 diamonds, and 2 sticks\n  await craftItem(bot, \"diamond_pickaxe\", 1);\n  bot.chat(\"Diamond pickaxe crafted.\");\n}", "description": "async function craftDiamondPickaxe(bot) {\n    // The function crafts a diamond pickaxe using a crafting table, 3 diamonds, and 2 sticks. It first checks if there is a crafting table in the inventory or nearby, and if not, crafts one using oak planks. Then it places the crafting table near the player if it's not already placed. Finally, it crafts a diamond pickaxe using the crafting table and announces the successful crafting in the chat.\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName[\"chest\"].id);\n  if (chest) {\n    const chestPosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Chest placed.\");\n  } else {\n    bot.chat(\"No chest found in inventory.\");\n  }\n}", "description": "async function placeChest(bot) {\n    // The function is about placing a chest block in front of the bot. It checks if the chest block is available in the inventory. If it is, the bot places the chest block one block away from its current position. If the chest block is successfully placed, the bot sends a chat message indicating that the chest has been placed. If the chest block is not available in the inventory, the bot sends a chat message indicating that no chest was found.\n}"}, "mineFiveRedstoneOres": {"code": "async function mineFiveRedstoneOres(bot) {\n  // Check if the bot has an iron pickaxe or a diamond pickaxe in its inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the iron pickaxe or diamond pickaxe\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have an iron or diamond pickaxe to mine redstone ores.\");\n    return;\n  }\n\n  // Explore the underground area around level 16 or below\n  const redstoneOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const redstone_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"redstone_ore\"].id,\n      maxDistance: 32,\n      minY: 0,\n      maxY: 16,\n      count: 5\n    });\n    return redstone_ores.length >= 5 ? redstone_ores : null;\n  });\n\n  // Mine the redstone ores when found\n  if (redstoneOres) {\n    await mineBlock(bot, \"redstone_ore\", 5);\n    bot.chat(\"5 redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 redstone ores.\");\n  }\n}", "description": "async function mineFiveRedstoneOres(bot) {\n    // The function is about mining 5 redstone ores using an iron or diamond pickaxe. First, check if the bot has an iron or diamond pickaxe in its inventory. If so, equip the pickaxe in the hand. Next, explore the underground area around level 16 or below until finding 5 redstone ores. Once 5 redstone ores are found, mine them using the equipped pickaxe. Finally, the function will output a message indicating whether 5 redstone ores were successfully mined or not.\n}"}, "mineFiveLapisOres": {"code": "async function mineFiveLapisOres(bot) {\n  // Check if the bot has a stone pickaxe, iron pickaxe, or diamond pickaxe in its inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the best pickaxe available\n  if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (stonePickaxe) {\n    await bot.equip(stonePickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have a stone, iron, or diamond pickaxe to mine lapis ores.\");\n    return;\n  }\n\n  // Explore the underground area to find lapis ores\n  const lapisOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const lapis_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"lapis_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return lapis_ores.length >= 5 ? lapis_ores : null;\n  });\n\n  // Mine 5 lapis ores using the equipped pickaxe\n  if (lapisOres) {\n    await mineBlock(bot, \"lapis_ore\", 5);\n    bot.chat(\"5 lapis ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 lapis ores.\");\n  }\n}", "description": "async function mineFiveLapisOres(bot) {\n    // The function is about mining 5 lapis ores using the best pickaxe available (stone, iron, or diamond). First, check if the bot has a stone, iron, or diamond pickaxe in its inventory. If so, equip the best pickaxe available. Next, explore the underground area until finding 5 lapis ores. Once 5 lapis ores are found, mine them using the equipped pickaxe.\n}"}, "mineOneDeepslateDiamondOre": {"code": "async function mineOneDeepslateDiamondOre(bot) {\n  // Equip the diamond pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Explore the underground area around level 12\n  const deepslateDiamondOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const deepslate_diamond_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"deepslate_diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 5,\n      maxY: 12\n    });\n    return deepslate_diamond_ore;\n  });\n\n  // Mine the deepslate diamond ore when found\n  if (deepslateDiamondOre) {\n    await mineBlock(bot, \"deepslate_diamond_ore\", 1);\n    bot.chat(\"1 deepslate diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find deepslate diamond ore.\");\n  }\n}", "description": "async function mineOneDeepslateDiamondOre(bot) {\n    // The function is about mining one deepslate diamond ore using a diamond pickaxe. The function equips the diamond pickaxe and explores the underground area around level 12 until it finds a deepslate diamond ore block. Once found, the function mines the deepslate diamond ore block and outputs a message indicating that one deepslate diamond ore has been mined. If the block is not found, the function outputs a message indicating that it could not find the block.\n}"}, "cookThreeRawChicken": {"code": "async function cookThreeRawChicken(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Smelt 3 raw chicken using coal as fuel\n  await smeltItem(bot, \"chicken\", \"coal\", 3);\n  bot.chat(\"3 raw chicken cooked.\");\n}", "description": "async function cookThreeRawChicken(bot) {\n    // The function is about cooking 3 raw chicken using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory or nearby. If not, it finds a furnace within a certain distance. Then, it places the furnace near the player if it's not already placed. Finally, it smelts 3 raw chicken using coal as fuel and saves the event of cooking 3 raw chicken.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Mine oak logs and craft oak planks\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"oak_planks\", 2);\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 8) {\n    // Mine iron ores and smelt them using a furnace\n    await mineBlock(bot, \"iron_ore\", 8 - (ironIngots ? ironIngots.count : 0));\n    await smeltItem(bot, \"raw_iron\", \"coal\", 8 - (ironIngots ? ironIngots.count : 0));\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Craft an iron chestplate using the crafting table and 8 iron ingots\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Iron chestplate crafted.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function is about crafting an iron chestplate. It checks if there is a crafting table nearby, and if not, it mines oak logs and crafts oak planks to make a crafting table. It then places the crafting table near the player. Next, it checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them using a furnace. Finally, it crafts an iron chestplate using the crafting table and 8 iron ingots.\n}"}, "smeltEightRawIron": {"code": "async function smeltEightRawIron(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Smelt 8 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 8);\n  bot.chat(\"8 raw iron smelted.\");\n}", "description": "async function smeltEightRawIron(bot) {\n    // The function is about smelting 8 raw iron using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory or nearby. If not, it places one near the player. Then, it smelts 8 raw iron using coal as fuel and saves the event of smelting 8 raw iron.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Find the iron chestplate in the bot's inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_chestplate\"].id);\n\n  // Equip the iron chestplate in the \"torso\" slot\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Iron chestplate equipped.\");\n  } else {\n    bot.chat(\"No iron chestplate found in inventory.\");\n  }\n}", "description": "async function equipIronChestplate(bot) {\n    // The function is about equipping an iron chestplate in the \"torso\" slot of the bot's inventory. It first finds the iron chestplate in the bot's inventory and then equips it in the \"torso\" slot. If the iron chestplate is not found in the inventory, it sends a message saying so.\n}"}, "killOneSkeletonWithBow": {"code": "async function killOneSkeletonWithBow(bot) {\n  // Check if the bot has a bow and arrows in the inventory\n  const bow = bot.inventory.findInventoryItem(mcData.itemsByName[\"bow\"].id);\n  const arrows = bot.inventory.findInventoryItem(mcData.itemsByName[\"arrow\"].id);\n\n  // Explore until finding a skeleton\n  const skeleton = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const skeleton = bot.nearestEntity(entity => {\n      return entity.name === \"skeleton\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return skeleton;\n  });\n  if (skeleton) {\n    if (bow && arrows && arrows.count > 0) {\n      // Equip the bow and attack the skeleton from a distance\n      await bot.equip(bow, \"hand\");\n      await bot.lookAt(skeleton.position);\n      await bot.activateItem();\n      bot.chat(\"Attacked skeleton with bow and arrow.\");\n    } else {\n      // Equip the stone sword and attack the skeleton\n      const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id);\n      await bot.equip(stoneSword, \"hand\");\n      await killMob(bot, \"skeleton\", 300);\n      bot.chat(\"Killed 1 skeleton.\");\n    }\n  } else {\n    bot.chat(\"Could not find a skeleton.\");\n  }\n}", "description": "async function killOneSkeletonWithBow(bot) {\n    // The function is about killing a single skeleton using either a bow and arrow or a stone sword. First, it checks if the bot has a bow and arrows in the inventory. Then, it explores the environment until finding a skeleton within 32 blocks. If a skeleton is found, it equips either the bow or the stone sword and attacks the skeleton. If the bot has a bow and arrows, it attacks the skeleton from a distance. Otherwise, it attacks the skeleton with the stone sword.\n}"}, "craftIronSwordWithChest": {"code": "async function craftIronSwordWithChest(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  let sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n\n  // If not, get the required items from the chest\n  if (!ironIngots || ironIngots.count < 2 || !sticks || sticks.count < 1) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 2,\n      \"stick\": 1\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron sword using the crafting table, 2 iron ingots, and 1 stick\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Iron sword crafted.\");\n}", "description": "async function craftIronSwordWithChest(bot) {\n    // The function crafts an iron sword using 2 iron ingots and 1 stick. If the required items are not in the inventory, the bot retrieves them from a chest. If there is no crafting table nearby, the bot crafts one using oak planks. The bot places the crafting table near the player if it's not already placed. Finally, the bot crafts an iron sword using the crafting table and the required items.\n}"}, "equipIronSword": {"code": "async function equipIronSword(bot) {\n  // Find the iron sword in the bot's inventory\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n\n  // Equip the iron sword in the main hand\n  if (ironSword) {\n    await bot.equip(ironSword, \"hand\");\n    bot.chat(\"Iron sword equipped.\");\n  } else {\n    bot.chat(\"No iron sword found in inventory.\");\n  }\n}", "description": "async function equipIronSword(bot) {\n    // The function is about equipping an iron sword in the bot's main hand. It first finds the iron sword in the bot's inventory. If the iron sword is found, it equips the iron sword in the main hand and sends a chat message. If the iron sword is not found, it sends a chat message indicating that no iron sword was found in the inventory.\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 4) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 4 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft iron boots using the crafting table and 4 iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronBoots(bot) {\n    // The function crafts a pair of iron boots. It checks if there are enough iron ingots in the inventory, and if not, it retrieves them from a nearby chest. It then checks if there is a crafting table nearby or in the inventory, and if not, it crafts one using oak planks. The function places the crafting table near the player if it's not already placed. Finally, it crafts iron boots using the crafting table and 4 iron ingots.\n}"}, "craftShield": {"code": "async function craftShield(bot) {\n  // Check if there are enough oak planks and iron ingots in the inventory\n  let oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n\n  // If not, get the required items from the chest\n  if (!oakPlanks || oakPlanks.count < 6 || !ironIngots || ironIngots.count < 1) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"oak_planks\": 6 - (oakPlanks ? oakPlanks.count : 0),\n      \"iron_ingot\": 1 - (ironIngots ? ironIngots.count : 0)\n    });\n    oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft a shield using the crafting table, 6 oak planks, and 1 iron ingot\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShield(bot) {\n    // The function is about crafting a shield using oak planks and iron ingots. It checks if there are enough oak planks and iron ingots in the inventory, and if not, gets the required items from a nearby chest. It then checks if there is a crafting table nearby or in the inventory, and if not, crafts one using oak planks. The function places the crafting table near the player if it's not already placed. Finally, it crafts a shield using the crafting table, 6 oak planks, and 1 iron ingot.\n}"}, "obtainWhiteWoolWithShears": {"code": "async function obtainWhiteWoolWithShears(bot) {\n  // Equip the shears\n  const shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  await bot.equip(shears, \"hand\");\n\n  // Find the nearest white sheep\n  const whiteSheep = bot.nearestEntity(entity => {\n    return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32 && entity.metadata[16] === 0;\n  });\n\n  // Use the shears on the white sheep to obtain white wool\n  if (whiteSheep) {\n    await bot.useOn(whiteSheep);\n    bot.chat(\"Obtained white wool using shears.\");\n  } else {\n    bot.chat(\"No white sheep found nearby.\");\n  }\n}", "description": "async function obtainWhiteWoolWithShears(bot) {\n    // The function is about obtaining white wool using shears. First, equip the shears in the hand. Next, find the nearest white sheep within 32 blocks. If a white sheep is found, use the shears on the sheep to obtain white wool. If no white sheep is found, output a message saying so.\n}"}, "eatCookedChicken": {"code": "async function eatCookedChicken(bot) {\n  // Check if the bot has at least 1 cooked chicken in its inventory\n  const cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n  if (cookedChicken) {\n    // Equip the cooked chicken in the main hand\n    await bot.equip(cookedChicken, \"hand\");\n\n    // Consume the cooked chicken\n    await bot.consume();\n    bot.chat(\"Ate 1 cooked chicken.\");\n  } else {\n    bot.chat(\"No cooked chicken in inventory.\");\n  }\n}", "description": "async function eatCookedChicken(bot) {\n    // The function is about eating a cooked chicken if it exists in the bot's inventory. If the bot has at least 1 cooked chicken, it will equip it in the main hand and consume it. Otherwise, it will output a message saying that there is no cooked chicken in the inventory.\n}"}, "craftLightningRod": {"code": "async function craftLightningRod(bot) {\n  // Check if there are enough copper ingots and sticks in the inventory\n  let copperIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"copper_ingot\"].id);\n  let sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n\n  // If not, get the required items from the chest\n  if (!copperIngots || copperIngots.count < 3 || !sticks || sticks.count < 2) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"copper_ingot\": 3 - (copperIngots ? copperIngots.count : 0),\n      \"stick\": 2 - (sticks ? sticks.count : 0)\n    });\n    copperIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"copper_ingot\"].id);\n    sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft a lightning rod using the crafting table, 3 copper ingots, and 2 sticks\n  await craftItem(bot, \"lightning_rod\", 1);\n  bot.chat(\"Lightning rod crafted.\");\n}", "description": "async function craftLightningRod(bot) {\n    // The function crafts a lightning rod using 3 copper ingots and 2 sticks. If the required items are not in the inventory, it gets them from a chest. If there is no crafting table nearby, it crafts one using oak planks. It then places the crafting table near the player if it's not already placed. Finally, it crafts a lightning rod using the crafting table and the required items.\n}"}, "craftIronLeggingsWithSmelting": {"code": "async function craftIronLeggingsWithSmelting(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 7) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 7 - (ironIngots ? ironIngots.count : 0),\n      \"raw_iron\": 7 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    const rawIron = bot.inventory.findInventoryItem(mcData.itemsByName[\"raw_iron\"].id);\n\n    // Check if there is a furnace nearby or in the inventory\n    let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n    if (!furnace) {\n      furnace = bot.findBlock({\n        matching: mcData.blocksByName[\"furnace\"].id,\n        maxDistance: 32\n      });\n      if (!furnace) {\n        // Craft a furnace using cobblestone\n        await mineBlock(bot, \"stone\", 8);\n        await craftItem(bot, \"furnace\", 1);\n        furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n      }\n    }\n\n    // Place the furnace near the player if it's not already placed\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    const furnaceBlock = bot.blockAt(furnacePosition);\n    if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n      await placeItem(bot, \"furnace\", furnacePosition);\n    }\n\n    // Smelt the raw iron using the furnace and coal as fuel\n    if (rawIron) {\n      await smeltItem(bot, \"raw_iron\", \"coal\", rawIron.count);\n      ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    }\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft iron leggings using the crafting table and 7 iron ingots\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Iron leggings crafted.\");\n}", "description": "async function craftIronLeggingsWithSmelting(bot) {\n    // The function crafts iron leggings using 7 iron ingots. If there are not enough iron ingots in the inventory, it gets them from a chest and smelts them using a furnace and coal as fuel. If there is no furnace nearby, it crafts one using cobblestone. If there is no crafting table nearby, it crafts one using oak planks. Finally, it crafts the iron leggings using the crafting table and places it near the player.\n}"}, "openChestAtPosition": {"code": "async function openChestAtPosition(bot) {\n  const chestPosition = new Vec3(-20, -16, 35);\n  await moveToChest(bot, chestPosition);\n  const chestBlock = bot.blockAt(chestPosition);\n  await bot.openContainer(chestBlock);\n  await closeChest(bot, chestBlock);\n  bot.chat(\"Chest opened.\");\n}", "description": "async function openChestAtPosition(bot) {\n    // The function is about opening a chest at a specific position. First, it moves the bot to the chest position using `moveToChest` helper function. Then, it gets the chest block at the position and opens the container using `bot.openContainer`. After that, it waits for the chest to close using `closeChest` helper function. Finally, it sends a chat message indicating that the chest has been opened.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 5) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 5 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron helmet using the crafting table and 5 iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using 5 iron ingots. It checks if there are enough iron ingots in the inventory, and if not, it retrieves them from a nearby chest. It then checks if there is a crafting table nearby or in the inventory, and if not, it crafts one using oak planks. The function places the crafting table near the player if it's not already placed. Finally, it crafts an iron helmet using the crafting table and 5 iron ingots.\n}"}, "craftIronBootsWithSuitablePosition": {"code": "async function findSuitablePosition(bot, startPosition) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = startPosition.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"grass_block\" || block.name === \"dirt\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftIronBootsWithSuitablePosition(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 4) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 4 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table\n  const startPosition = bot.entity.position.floored();\n  const tablePosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the crafting table at the suitable position\n  if (tablePosition) {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the crafting table.\");\n    return;\n  }\n\n  // Craft iron boots using the crafting table and 4 iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronBootsWithSuitablePosition(bot) {\n    // The function is about crafting iron boots using a crafting table and 4 iron ingots. First, check if there are enough iron ingots in the inventory. If not, get them from a chest. Then, check if there is a crafting table nearby or in the inventory. If not, craft one using oak planks. Next, find a suitable position to place the crafting table and place it there. Finally, craft the iron boots using the crafting table and 4 iron ingots.\n}"}, "craftIronHelmetWithSuitablePosition": {"code": "async function findSuitablePosition(bot, startPosition) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = startPosition.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"grass_block\" || block.name === \"dirt\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftIronHelmetWithSuitablePosition(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table\n  const startPosition = bot.entity.position.floored();\n  const tablePosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the crafting table at the suitable position\n  if (tablePosition) {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the crafting table.\");\n    return;\n  }\n\n  // Craft an iron helmet using the crafting table and 5 iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmetWithSuitablePosition(bot) {\n    // The function is about crafting an iron helmet using a crafting table and 5 iron ingots. First, it checks if there is a crafting table in the inventory or nearby. If not, it crafts a crafting table using oak planks. Then, it finds a suitable position to place the crafting table and places it there. After that, it crafts an iron helmet using the crafting table and 5 iron ingots. Finally, it sends a chat message indicating that the iron helmet has been crafted.\n}"}, "collectAlliumWithShears": {"code": "async function collectAlliumWithShears(bot) {\n  // Find an allium flower nearby\n  const allium = bot.findBlock({\n    matching: mcData.blocksByName[\"allium\"].id,\n    maxDistance: 32\n  });\n  if (!allium) {\n    bot.chat(\"No allium flower found nearby.\");\n    return;\n  }\n\n  // Go near the allium flower\n  await bot.pathfinder.goto(new GoalGetToBlock(allium.position.x, allium.position.y, allium.position.z));\n\n  // Equip the shears\n  const shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  await bot.equip(shears, \"hand\");\n\n  // Use the shears on the allium flower to collect it\n  await bot.useOn(allium);\n  bot.chat(\"Collected 1 allium using shears.\");\n}", "description": "async function collectAlliumWithShears(bot) {\n    // The function is about collecting an allium flower using shears. It first finds an allium flower nearby and goes near it. Then, it equips the shears and uses them to collect the allium flower. Finally, it sends a chat message indicating that 1 allium has been collected.\n}"}, "craftBed": {"code": "async function craftBed(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Mine oak logs and craft oak planks\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"oak_planks\", 2);\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    if (tableBlock && tableBlock.name === \"lily_of_the_valley\") {\n      // Find a different position to place the crafting table\n      const newPosition = bot.entity.position.offset(-1, 0, 0);\n      await placeItem(bot, \"crafting_table\", newPosition);\n    } else {\n      await placeItem(bot, \"crafting_table\", tablePosition);\n    }\n  }\n\n  // Check if there are enough wool blocks in the inventory\n  let wool = bot.inventory.findInventoryItem(mcData.itemsByName[\"white_wool\"].id);\n  if (!wool || wool.count < 3) {\n    // Find a sheep and use shears to collect wool\n    bot.chat(\"Finding a sheep to collect wool...\");\n    const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    await bot.pathfinder.goto(new GoalGetToBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    await bot.equip(mcData.itemsByName[\"shears\"].id, \"hand\");\n    await bot.useOn(sheep);\n    wool = bot.inventory.findInventoryItem(mcData.itemsByName[\"white_wool\"].id);\n  }\n\n  // Check if there are enough wooden planks in the inventory\n  let oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 3) {\n    // Mine oak logs and craft oak planks\n    bot.chat(\"Mining oak logs to craft oak planks...\");\n    await mineBlock(bot, \"oak_log\", 1);\n    bot.chat(\"Crafting oak planks...\");\n    await craftItem(bot, \"oak_planks\", 1);\n  }\n\n  // Craft a bed using the wool blocks and wooden planks\n  bot.chat(\"Crafting a bed...\");\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"Bed crafted.\");\n}", "description": "async function craftBed(bot) {\n    // The function crafts a bed using wool blocks and wooden planks. It first checks if there is a crafting table nearby, and if not, it mines oak logs and crafts a crafting table. It then finds a suitable position to place the crafting table and places it. Next, it checks if there are enough wool blocks and wooden planks in the inventory, and if not, it finds a sheep to collect wool and mines oak logs to craft oak planks. Finally, it crafts a bed using the collected wool blocks and wooden planks.\n}"}, "findCookAndEatChicken": {"code": "async function findCookAndEatChicken(bot) {\n  // Check if the bot has at least 1 cooked chicken in its inventory\n  let cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n  if (cookedChicken) {\n    // Eat the cooked chicken\n    await eatCookedChicken(bot);\n  } else {\n    // Check if there is raw chicken in the inventory or in the nearby chest\n    let rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    if (!rawChicken) {\n      const chestPosition = new Vec3(-17, 1, 17);\n      await getItemFromChest(bot, chestPosition, {\n        \"chicken\": 1\n      });\n      rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    }\n\n    // If there is still no raw chicken, explore the area to find and kill a chicken\n    if (!rawChicken) {\n      await killMob(bot, \"chicken\", 300);\n      rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    }\n\n    // Cook the raw chicken into cooked chicken using a furnace\n    if (rawChicken) {\n      await smeltItem(bot, \"chicken\", \"coal\", 1);\n      cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n    }\n\n    // Eat the cooked chicken if available\n    if (cookedChicken) {\n      await eatCookedChicken(bot);\n    } else {\n      bot.chat(\"No cooked chicken available.\");\n    }\n  }\n}", "description": "async function findCookAndEatChicken(bot) {\n    // The function is about finding and eating cooked chicken. If the bot already has cooked chicken, it will eat it. Otherwise, it will check if there is raw chicken in the inventory or in a nearby chest. If there is no raw chicken, it will explore the area to find and kill a chicken. Once raw chicken is obtained, it will be cooked into cooked chicken using a furnace. If cooked chicken is available, it will be eaten, otherwise, it will output a message saying that there is no cooked chicken available.\n}"}, "sleepInWhiteBed": {"code": "async function sleepInWhiteBed(bot) {\n  // Find a suitable position to place the bed\n  const startPosition = bot.entity.position.floored();\n  const bedPosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the white bed at the suitable position\n  if (bedPosition) {\n    await placeItem(bot, \"white_bed\", bedPosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the bed.\");\n    return;\n  }\n\n  // Sleep in the bed\n  const bedBlock = bot.blockAt(bedPosition);\n  await bot.sleep(bedBlock);\n  bot.chat(\"Slept in the white bed.\");\n}", "description": "async function sleepInWhiteBed(bot) {\n    // The function is about finding a suitable position to place a white bed and sleeping in it. It first finds a suitable position to place the bed and places the white bed at that position. Then, it sleeps in the bed and sends a message to the chat that it has slept in the white bed.\n}"}, "equipIronLeggings": {"code": "async function equipIronLeggings(bot) {\n  // Find the iron leggings in the bot's inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_leggings\"].id);\n\n  // Equip the iron leggings in the \"legs\" slot\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Iron leggings equipped.\");\n  } else {\n    bot.chat(\"No iron leggings found in inventory.\");\n  }\n}", "description": "async function equipIronLeggings(bot) {\n    // The function is about equipping iron leggings in the \"legs\" slot of the bot's armor. It first finds the iron leggings in the bot's inventory and then equips them in the \"legs\" slot. If the iron leggings are not found in the inventory, it sends a message saying so.\n}"}, "equipIronHelmetAndBoots": {"code": "async function equipIronHelmetAndBoots(bot) {\n  // Find the iron helmet in the bot's inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_helmet\"].id);\n\n  // Equip the iron helmet in the \"head\" slot\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Iron helmet equipped.\");\n  } else {\n    bot.chat(\"No iron helmet found in inventory.\");\n  }\n\n  // Find the iron boots in the bot's inventory\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_boots\"].id);\n\n  // Equip the iron boots in the \"feet\" slot\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Iron boots equipped.\");\n  } else {\n    bot.chat(\"No iron boots found in inventory.\");\n  }\n}", "description": "async function equipIronHelmetAndBoots(bot) {\n    // The function equips an iron helmet and iron boots on the bot if they are available in the inventory. The iron helmet is equipped in the \"head\" slot and the iron boots are equipped in the \"feet\" slot. If either item is not found in the inventory, a message is sent to the chat.\n}"}, "killOneCreeper": {"code": "async function killOneCreeper(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Explore until finding a creeper\n  const creeper = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const creeper = bot.nearestEntity(entity => {\n      return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return creeper;\n  });\n  if (creeper) {\n    // Attack the creeper while maintaining a safe distance\n    await killMob(bot, \"creeper\", 300);\n    bot.chat(\"Killed 1 creeper.\");\n  } else {\n    bot.chat(\"Could not find a creeper.\");\n  }\n}", "description": "async function killOneCreeper(bot) {\n    // The function is about equipping an iron sword and killing one creeper. First, equip the iron sword in the hand. Next, explore the environment until finding a creeper within 32 blocks. Once a creeper is found, attack the creeper while maintaining a safe distance. Finally, the function will output a message indicating whether a creeper was killed or not.\n}"}, "obtainAmethystShard": {"code": "async function obtainAmethystShard(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore the underground area to find an amethyst geode\n  const amethystGeode = await exploreUntil(bot, new Vec3(0, -1, 0), 120, () => {\n    const amethyst_geode = bot.findBlock({\n      matching: mcData.blocksByName[\"amethyst_cluster\"].id,\n      maxDistance: 32\n    });\n    return amethyst_geode;\n  });\n\n  // Mine the amethyst geode to obtain 1 amethyst shard\n  if (amethystGeode) {\n    await mineBlock(bot, \"amethyst_cluster\", 1);\n    bot.chat(\"1 amethyst shard obtained.\");\n  } else {\n    bot.chat(\"Could not find an amethyst geode. Increasing exploration time and trying again.\");\n    await obtainAmethystShard(bot);\n  }\n}", "description": "async function obtainAmethystShard(bot) {\n    // The function is about obtaining 1 amethyst shard by exploring the underground area to find an amethyst geode and mining it using an iron pickaxe. If an amethyst geode is not found, the function will increase the exploration time and try again.\n}"}, "mineFiveDeepslateRedstoneOres": {"code": "async function mineFiveDeepslateRedstoneOres(bot) {\n  // Equip the diamond pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Explore the underground area to find deepslate_redstone_ore\n  const deepslateRedstoneOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const deepslate_redstone_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"deepslate_redstone_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return deepslate_redstone_ores.length >= 5 ? deepslate_redstone_ores : null;\n  });\n\n  // Mine 5 deepslate_redstone_ore using the equipped diamond_pickaxe\n  if (deepslateRedstoneOres) {\n    await mineBlock(bot, \"deepslate_redstone_ore\", 5);\n    bot.chat(\"5 deepslate redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 deepslate redstone ores.\");\n  }\n}", "description": "async function mineFiveDeepslateRedstoneOres(bot) {\n    // The function is about mining 5 deepslate_redstone_ore blocks using a diamond pickaxe. The function equips the diamond pickaxe and explores the underground area to find deepslate_redstone_ore blocks. Once 5 deepslate_redstone_ore blocks are found, the function mines them using the diamond pickaxe. If 5 deepslate_redstone_ore blocks are not found, the function outputs a message indicating that it could not find them.\n}"}, "craftSpyglass": {"code": "async function craftSpyglass(bot) {\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft a spyglass using the crafting table, 2 copper ingots, and 1 amethyst shard\n  await craftItem(bot, \"spyglass\", 1);\n  bot.chat(\"Spyglass crafted.\");\n}", "description": "async function craftSpyglass(bot) {\n    // The function crafts a spyglass using a crafting table, 2 copper ingots, and 1 amethyst shard. It first checks if there is a crafting table nearby or in the inventory, and if not, crafts one using oak planks. Then it places the crafting table near the player if it's not already placed. Finally, it crafts the spyglass using the crafting table and announces that the spyglass has been crafted.\n}"}, "cookSevenRawPorkchops": {"code": "async function cookSevenRawPorkchops(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Check if there are 7 raw porkchops in the inventory\n  let rawPorkchops = bot.inventory.findInventoryItem(mcData.itemsByName[\"porkchop\"].id);\n  if (!rawPorkchops || rawPorkchops.count < 7) {\n    // Collect raw porkchops by killing pigs\n    const pigsToKill = 7 - (rawPorkchops ? rawPorkchops.count : 0);\n    for (let i = 0; i < pigsToKill; i++) {\n      await killMob(bot, \"pig\", 300);\n    }\n    rawPorkchops = bot.inventory.findInventoryItem(mcData.itemsByName[\"porkchop\"].id);\n  }\n\n  // Smelt 7 raw porkchops using coal as fuel\n  await smeltItem(bot, \"porkchop\", \"coal\", 7);\n  bot.chat(\"7 raw porkchops cooked.\");\n}", "description": "async function cookSevenRawPorkchops(bot) {\n    // The function is about cooking 7 raw porkchops using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory or nearby. If not, it places one near the player. Then, it checks if there are 7 raw porkchops in the inventory. If not, it kills pigs to collect them. Finally, it smelts 7 raw porkchops using coal as fuel and saves the event of cooking 7 raw porkchops.\n}"}, "obtainThreeBirchLogs": {"code": "async function obtainThreeBirchLogs(bot) {\n  const chestPosition = new Vec3(-17, 1, 17);\n  const startingPosition = bot.entity.position.clone();\n\n  // Check if the bot is already near the chest\n  if (bot.entity.position.distanceTo(chestPosition) > 5) {\n    // Use exploreUntil to find a path to the chest\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chest = bot.findBlock({\n        matching: mcData.blocksByName[\"chest\"].id,\n        maxDistance: 32\n      });\n      return chest;\n    });\n  }\n\n  // Take 3 birch logs from the chest\n  await getItemFromChest(bot, chestPosition, {\n    \"birch_log\": 3\n  });\n\n  // Return to the starting position\n  await bot.pathfinder.goto(new GoalNear(startingPosition.x, startingPosition.y, startingPosition.z, 1));\n  bot.chat(\"Obtained 3 birch logs.\");\n}", "description": "async function obtainThreeBirchLogs(bot) {\n    // The function is about obtaining 3 birch logs from a chest. If the bot is not already near the chest, it uses `exploreUntil` to find a path to the chest. Then, it takes 3 birch logs from the chest using `getItemFromChest`. Finally, it returns to the starting position and sends a chat message indicating that it has obtained 3 birch logs.\n}"}, "eatOneCookedPorkchop": {"code": "async function eatCookedPorkchop(bot) {\n  // Check if the bot has at least 1 cooked porkchop in its inventory\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_porkchop\"].id);\n  if (cookedPorkchop) {\n    // Equip the cooked porkchop in the main hand\n    await bot.equip(cookedPorkchop, \"hand\");\n\n    // Consume the cooked porkchop\n    await bot.consume();\n    bot.chat(\"Ate 1 cooked porkchop.\");\n  } else {\n    bot.chat(\"No cooked porkchop in inventory.\");\n  }\n}\n\nasync function eatOneCookedPorkchop(bot) {\n  await eatCookedPorkchop(bot);\n}", "description": "async function eatOneCookedPorkchop(bot) {\n    // The function is about eating a cooked porkchop if it exists in the bot's inventory. If the cooked porkchop is available, it will be equipped in the main hand and consumed. If there is no cooked porkchop in the inventory, the bot will send a message saying so.\n}"}}